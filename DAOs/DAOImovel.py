#######################################################
# 
# DAOImovel.py
# Python implementation of the Class DAOImovel
# Generated by Enterprise Architect
# Created on:      15-Apr-2024 9:30:53 PM
# Original author: rlnet
# 
#######################################################
import os, pickle
from DAOs.DAO import DAO
from entidades.Imovel import Imovel


class DAOImovel(DAO):
    def __init__(self, arquivo: str):
        self.__arquivo = arquivo
        if os.path.exists(self.__arquivo):
            try:
                self._DAOImovel__conteudo = self.__load()
            except FileNotFoundError:
                self._DAOImovel__conteudo = []
                self.__dump()

    @property
    def conteudo(self) -> list:
        return self.__conteudo

    def create(self, desc: str, titulo: str, id: int, habilitado=True) -> bool:
        tamanho = len(self.__conteudo)
        self.__conteudo.append(Imovel(desc, titulo=titulo, ident=id, habilitado=habilitado))
        self.__dump()
        self.__load()
        if len(self.__conteudo) > tamanho:
            return True
        else:
            return False

    def delete(self, id: int) -> bool:
        for i in range(len(self.__conteudo)):
            if self.__conteudo[i].id == id:
                self.__conteudo[i].habilitado = False
                self.__dump()
                self.__load()
                return True
        return False

    def read(self):
        return self.__conteudo

    def update(self, **kwargs) -> bool:
        for i in range(len(self.__conteudo)):
            if self.__conteudo[i].id == kwargs['id']:
                if 'titulo' in kwargs:
                    self.__conteudo[i].titulo = kwargs['titulo']
                if 'desc' in kwargs:
                    self.__conteudo[i].desc = kwargs['desc']
                if 'habilitado' in kwargs:
                    self.__conteudo[i].habilitado = kwargs['habilitado']
                self.__dump()
                self.__load()
                return True
        return False

    def __dump(self):
        with open(self.__arquivo, 'wb') as arquivo:
            pickle.dump(self.__conteudo, arquivo)

    def __load(self):
        with open(self.__arquivo, 'rb') as arquivo:
            self.__conteudo = pickle.load(arquivo)
        return self.__conteudo
