#######################################################
# 
# ControladorImoveis.py
# Python implementation of the Class ControladorImoveis
# Generated by Enterprise Architect
# Created on:      15-Apr-2024 9:30:53 PM
# Original author: rlnet
# 
#######################################################
from limites.TelaImoveis import TelaImoveis

from controladores.ControladorGeraIdImovel import ControladorGeraIdImovel
from DAOs.DAOImovel import DAOImovel

class ControladorImoveis:
    C_IMOVEIS = "C_IMOVEIS"
    R_IMOVEIS = "R_IMOVEIS"
    U_IMOVEIS = "U_IMOVEIS"
    D_IMOVEIS = "D_IMOVEIS"
    PROSSEGUIR = "PROSSEGUIR"
    VOLTAR = "VOLTAR"
    SAIR = "SAIR"

    def __init__(self):
        self.__dao = DAOImovel("./imoveis.pkl")
        self.__tela = TelaImoveis()

    def abrir_menu(self):
        while True:
            match self.__tela.abrir_menu():
                case self.C_IMOVEIS:
                    self.cadastrar_imovel()
                case self.R_IMOVEIS:
                    self.listar_imoveis()
                case self.U_IMOVEIS:
                    self.alterar_imovel()
                case self.D_IMOVEIS:
                    self.excluir_imovel()
                case self.PROSSEGUIR:
                    return self.PROSSEGUIR
                case self.VOLTAR:
                    return self.VOLTAR
                case self.VOLTAR:
                    return
                case None:
                    return

    def alterar_imovel(self):
        imoveis = self.__dao.read()
        imovel_selecionado = self.__tela.selecionar_imovel(imoveis)

        if imovel_selecionado is None:
            return

        novo_titulo, nova_desc, id_imovel = imovel_selecionado

        if novo_titulo is None and nova_desc is None and id_imovel is None:
            return

        if self.validar_campos_vazios(novo_titulo, nova_desc):
            return

        # Verificar se o novo título já existe em outro imóvel
        imovel_existente = self.find_imovel(novo_titulo)
        if imovel_existente is not None and imovel_existente.id != id_imovel:
            self.__tela.mostra_popup("Erro: Um imóvel com este título já existe.")
            return

        self.__dao.update(id=id_imovel, novo_titulo=novo_titulo, nova_desc=nova_desc)

    def cadastrar_imovel(self):
        titulo, desc = self.__tela.cadastrar_imovel()

        if titulo is None and desc is None:
            return
        
        if self.validar_campos_vazios(titulo, desc):
            return
        
        if not self.validar_titulo(titulo):
            return

        self.__dao.create(desc=desc, titulo=titulo, id=ControladorGeraIdImovel().gera_id())

    def excluir_imovel(self):
        imoveis = self.__dao.read()
        if not imoveis:
            self.__tela.mostra_popup("Não há imóveis cadastrados.")
            return
        
        id_imovel = self.__tela.excluir_imovel(imoveis)
        
        if id_imovel is None:
            return
        
        if not self.validar_id(id_imovel):
            return

        id_imovel = int(id_imovel)

        # Se todas as validações passaram, proceda com a exclusão do imóvel
        self.__dao.delete(id_imovel)


    def exibir_imovel(self):
        pass

    def find_imovel(self, nome_imovel):
        encontrados = [imovel for imovel in self.__dao.read() if imovel.titulo == nome_imovel]
        return encontrados[0] if encontrados else None
    
    def find_imovel_por_id(self, id_imovel):
        try:
            id_imovel = int(id_imovel)
        except ValueError:
            return None
        encontrados = [imovel for imovel in self.__dao.read() if imovel.id == id_imovel]
        return encontrados[0] if encontrados else None

    def listar_imoveis(self):
        imoveis = self.__dao.read()
        if not imoveis:
            self.__tela.mostra_popup("Não há imóveis cadastrados.")
        else:
            self.__tela.exibir_imoveis(imoveis)

    def pegar_todos_imoveis(self):
        imoveis = [imovel for imovel in self.__dao.read()]
        return imoveis
    
    def validar_campos_vazios(self, titulo, desc):
        if (titulo is None or desc is None or
            titulo.strip() == "" or desc.strip() == ""):
            self.__tela.mostra_popup("Todos os campos devem ser preenchidos.")
            return True
        return False
    

    def validar_titulo(self, titulo):
        if self.find_imovel(titulo) is not None:
            self.__tela.mostra_popup("Erro: Um imóvel com este título já existe.")
            return False
        return True
    
    def validar_id(self, id_imovel):
        if not id_imovel.strip():
            self.__tela.mostra_popup("O campo ID não pode estar vazio.")
            return False

        try:
            id_imovel = int(id_imovel)
        except ValueError:
            self.__tela.mostra_popup("O ID do imóvel deve ser um número inteiro.")
            return False

        if not any(imovel.id == id_imovel for imovel in self.__dao.read()):
            self.__tela.mostra_popup(f"Imóvel com ID {id_imovel} não encontrado.")
            return False

        return True


    
    

