#######################################################
# 
# ControladorPlataformas.py
# Python implementation of the Class ControladorPlataformas
# Generated by Enterprise Architect
# Created on:      15-Apr-2024 9:30:53 PM
# Original author: rlnet
# 
#######################################################
from limites.TelaPlataformas import TelaPlataformas
from controladores.ControladorGeraIdPlataforma import ControladorGeraIdPlataforma
from DAOs.DAOPlataforma import DAOPlataforma
from entidades.Plataforma import Plataforma


class ControladorPlataformas:
    C_PLATAFORMAS = "C_PLATAFORMAS"
    R_PLATAFORMAS = "R_PLATAFORMAS"
    U_PLATAFORMAS = "U_PLATAFORMAS"
    D_PLATAFORMAS = "D_PLATAFORMAS"
    PROXIMO = "PROXIMO"
    VOLTAR = "VOLTAR"

    def __init__(self):
        self.__dao = DAOPlataforma("plataformas.pkl")
        self.__tela = TelaPlataformas()

    def abrir_menu(self):
        while True:
            match self.__tela.abrir_menu():
                case self.C_PLATAFORMAS:
                    self.cadastrar_plataforma()
                case self.R_PLATAFORMAS:
                    self.listar_plataformas()
                case self.U_PLATAFORMAS:
                    self.alterar_plataforma()
                case self.D_PLATAFORMAS:
                    self.excluir_plataforma()
                case self.VOLTAR:
                    return
                case None:
                    return

    def alterar_plataforma(self):
        nova_plataforma = self.__tela.selecionar_plataforma(self.__dao.read())
        if nova_plataforma is None:
            return
        else:
            self.__dao.update(id=nova_plataforma[2], novo_titulo=nova_plataforma[0], nova_desc=nova_plataforma[1])

    def cadastrar_plataforma(self):
        titulo, desc = self.__tela.cadastrar_plataforma()
        if titulo is None or desc is None:
            return
        else:
            self.__dao.create(desc=desc, titulo=titulo, id=ControladorGeraIdPlataforma().gera_id())

    def excluir_plataforma(self):
        id_plataforma = self.__tela.excluir_plataforma(self.__dao.read())
        if id_plataforma is None:
            return
        self.__dao.delete(id=int(id_plataforma))

    def exibir_plataforma(self):
        pass

    def find_plataforma(self, nome_plataforma: str) -> list[Plataforma]:
        return [plataforma for plataforma in self.__dao.read() if plataforma.nome == nome_plataforma][0]

    def listar_plataformas(self):
        self.__tela.exibir_plataformas(self.__dao.read())

    def pegar_todas_plataformas(self) -> list[Plataforma]:
        plataformas = [plataforma for plataforma in self.__dao.read()]
        return plataformas

    def find_plataforma_por_id(self, id_plataforma: int) -> Plataforma:
        try:
            id_plataforma=int(id_plataforma)
        except ValueError:
            return None
        encontrados = [plataforma for plataforma in self.__dao.read() if plataforma.id == id_plataforma]
        return encontrados[0] if len(encontrados) > 0 else None

