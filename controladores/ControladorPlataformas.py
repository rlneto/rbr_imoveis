#######################################################
# 
# ControladorPlataformas.py
# Python implementation of the Class ControladorPlataformas
# Generated by Enterprise Architect
# Created on:      15-Apr-2024 9:30:53 PM
# Original author: rlnet
# 
#######################################################
from limites.TelaPlataformas import TelaPlataformas
from limites.TelaAlterarPlataformas import TelaAlterarPlataformas
from limites.TelaExcluiPlataformas import TelaExcluiPlataformas
from limites.TelaExibePlataformas import TelaExibePlataformas
from limites.TelaCadastraPlataformas import TelaCadastraPlataformas
from controladores.ControladorGeraIdPlataforma import ControladorGeraIdPlataforma
from DAOs.DAOPlataforma import DAOPlataforma
from limites.TelaPopup import TelaPopup


class ControladorPlataformas:
    C_PLATAFORMAS = "C_PLATAFORMAS"
    R_PLATAFORMAS = "R_PLATAFORMAS"
    U_PLATAFORMAS = "U_PLATAFORMAS"
    D_PLATAFORMAS = "D_PLATAFORMAS"
    PROXIMO = "PROXIMO"
    VOLTAR = "VOLTAR"

    def __init__(self):
        self.__dao = DAOPlataforma("plataformas.pkl")
        self.__tela = TelaPlataformas()
        self.__tela_alterar = TelaAlterarPlataformas()
        self.__tela_excluir = TelaExcluiPlataformas()
        self.__tela_exibir = TelaExibePlataformas()
        self.__tela_cadastrar = TelaCadastraPlataformas()

    def abrir_menu(self):
        while True:
            match self.__tela.abrir_menu():
                case self.C_PLATAFORMAS:
                    self.cadastrar_plataforma()
                case self.R_PLATAFORMAS:
                    self.listar_plataformas()
                case self.U_PLATAFORMAS:
                    self.alterar_plataforma()
                case self.D_PLATAFORMAS:
                    self.excluir_plataforma()
                case self.VOLTAR:
                    return
                case None:
                    return

    def alterar_plataforma(self):
        nova_plataforma = self.__tela_alterar.selecionar_plataforma(self.__dao.read())
        if nova_plataforma is None:
            return
        else:
            self.__dao.update(id=nova_plataforma[2], novo_titulo=nova_plataforma[0], nova_desc=nova_plataforma[1])

    def cadastrar_plataforma(self):
        titulo, desc = self.__tela_cadastrar.cadastrar_plataforma()
        if titulo is None or desc is None:
            return
        else:
            self.__dao.create(desc=desc, titulo=titulo, id=ControladorGeraIdPlataforma().gera_id())

    def excluir_plataforma(self):
        id_plataforma = self.__tela_excluir.excluir_plataforma(self.__dao.read())
        if id_plataforma is None:
            return
        self.__dao.delete(id=int(id_plataforma))

    def exibir_plataforma(self):
        pass

    def find_plataforma(self, nome_plataforma):
        return [plataforma for plataforma in self.__dao.read() if plataforma.nome == nome_plataforma][0]

    def listar_plataformas(self):
        self.__tela_exibir.exibir_plataformas(self.__dao.read())
